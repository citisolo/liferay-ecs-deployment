name: Deploy Liferay to ECS

on:
  push:
    branches:
      - nonprod

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    env:
      AWS_REGION: "eu-west-1" # Replace with your AWS region
      ECS_CLUSTER_NAME: "liferay_cluster"
      ECS_SERVICE_NAME: "liferay_service"
      ECS_TASK_FAMILY: "liferay_task"
      CONTAINER_NAME: liferay
      CONTAINER_PORT: 8080

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: your-aws-region # Replace with your AWS region

      - name: Deploy Liferay to ECS
        run: |
          IMAGE_URI="liferay/dxp:your-tag" # Consider making this a variable or secret if it changes often

          # Register a new task definition with this image
          TASK_DEF=$(aws ecs register-task-definition \
            --family ${{ env.ECS_TASK_FAMILY }} \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "2048" \
            --memory "4096" \
            --execution-role-arn your-execution-role-arn \ # Make this a secret or env var if needed
            --container-definitions "[{\"name\":\"${{ env.CONTAINER_NAME }}\",\"image\":\"${IMAGE_URI}\",\"cpu\":2048,\"memory\":4096,\"essential\":true,\"portMappings\":[{\"containerPort\":${{ env.CONTAINER_PORT }},\"hostPort\":${{ env.CONTAINER_PORT }},\"protocol\":\"tcp\"}]}]" \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          # Update the ECS service to use the new task definition
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER_NAME }} \
            --service ${{ env.ECS_SERVICE_NAME }} \
            --task-definition "${TASK_DEF}"
            
  sync-to-main:
    name: Sync Staging to Main
    needs: deploy-to-ecs
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/staging' }} && ${{ github.event_name == 'push' }}
    steps:
      - name: Checkout staging branch
        uses: actions/checkout@v2
        with:
          ref: staging

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Merge staging into main
        run: |
          git fetch origin main:main
          git checkout main
          git merge staging --no-edit
          git push origin main
